@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components
@using global::Shared
@using global::Shared.Interfaces
@inject ThemeState _themeState
@inject NavigationManager _uriHelpWer
@inject IJSRuntime _jsWRuntime

@if (Theme != "default")
{
    <link href="_content/Radzen.Blazor/css/@(Theme)" rel="stylesheet" />
}
<style>
    .center {
        text-align: center;
    }



</style>
<RadzenHeader>
    <div class="center">
     <a href="/" class="center" style="padding: 0;margin-bottom:0"> <h5 Path="https://github.com/UPINepal/" >Apps and Banks on UPI</h5></a>
        <small style="padding: 0;margin-top:0">(Not associated with PaymentNepal, NPCI, or any financial inst.)</small>
    </div>
</RadzenHeader>

<div style="width:100%">
    <RadzenBody @ref="@body0" @bind-Expanded="@bodyExpanded">
        <ChildContent>
            <RadzenContentContainer Name="main">
                <div class="container-fluid">
                    <div class="row">
                        <div class="light col-12 pt-4 pb-5 px-3 px-lg-5">
                            @Body
                        </div>
                    </div>
                </div>
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>
</div>

<RadzenCard>
    <ChildContent>
        <RadzenLink Text="GitHub" Path="https://github.com/UPINepal/" Target="_blank" Style="alignment: right; margin-left:5px;vertical-align:bottom;" />
        <RadzenLabel Text="|"></RadzenLabel>
        <RadzenLabel Text="Logos and Trademarks belongs to respective Company"></RadzenLabel>
        <RadzenLabel Text="|"></RadzenLabel>
        <RadzenLabel Text="contact@upinepal.com"></RadzenLabel>
    </ChildContent>
</RadzenCard>
@code {

    string projectName = "List of UPI Apps & Banks In Nepal";
    RadzenSidebar sidebar0;
    RadzenBody body0;
    bool sidebarExpanded = false;
    bool bodyExpanded = true;

    dynamic themes = new[]
        {
        new {Text = "Default Theme", Value = "default"},
        new {Text = "Dark Theme", Value = "dark"},
        new {Text = "Software Theme", Value = "software"},
        new {Text = "Humanistic Theme", Value = "humanistic"}
    };

  

    string Theme
    {
        get { return $"{_themeState.CurrentTheme}.css"; }
    }

    protected override void OnInitialized()
    {
      
        System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
    }

  

    void ChangeTheme(object value)
    {
        _themeState.CurrentTheme = value.ToString();
        _uriHelpWer.NavigateTo(_uriHelpWer.ToAbsoluteUri(_uriHelpWer.Uri).ToString());
    }

}
