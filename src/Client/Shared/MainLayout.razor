@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components
@using global::Shared
@using global::Shared.Interfaces
@inject ThemeState _themeState
@inject IMenuService _menuService
@inject NavigationManager _uriHelpWer
@inject IJSRuntime _jsWRuntime

@if (Theme != "default")
{
    <link href="_content/Radzen.Blazor/css/@(Theme)" rel="stylesheet" />
}
<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />
<style>
    .center {
        text-align: center;
    }



</style>
<RadzenHeader>
    <div class="center">
        <h5 style="margin-top: 0; margin-bottom: 0">Apps and Banks on UPI</h5>
        <small>(Not associated with NPCI, paymentNepal or any financial inst.)</small>
    </div>
</RadzenHeader>

<div style="width:100%">
    <RadzenBody @ref="@body0" @bind-Expanded="@bodyExpanded">
        <ChildContent>
            <RadzenContentContainer Name="main">
                <div class="container-fluid">
                    <div class="row">
                        <div class="light col-12 pt-4 pb-5 px-3 px-lg-5">
                            @Body
                        </div>
                    </div>
                </div>
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>
</div>
<RadzenSidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded">
    <ChildContent>
        <RadzenPanelMenu>
            @foreach (var category in examples)
            {
                <RadzenPanelMenuItem @bind-Expanded="@category.Expanded" Text="@category.Name" Path="@category.Path" Icon="@category.Icon">
                    </RadzenPanelMenuItem>
            }
        </RadzenPanelMenu>
    </ChildContent>
</RadzenSidebar>
@code {

    string projectName = "List of UPI Apps & Banks In Nepal";
    RadzenSidebar sidebar0;
    RadzenBody body0;
    bool sidebarExpanded = false;
    bool bodyExpanded = true;

    dynamic themes = new[]
        {
        new {Text = "Default Theme", Value = "default"},
        new {Text = "Dark Theme", Value = "dark"},
        new {Text = "Software Theme", Value = "software"},
        new {Text = "Humanistic Theme", Value = "humanistic"}
    };

    IEnumerable<MenuClass> examples;

    string Theme
    {
        get { return $"{_themeState.CurrentTheme}.css"; }
    }

    protected override void OnInitialized()
    {
        examples = _menuService.Examples;
        System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
    }

    void FilterPanelMenu(ChangeEventArgs args)
    {
        var term = args.Value.ToString();

        examples = _menuService.Filter(term);
    }

    void ChangeTheme(object value)
    {
        _themeState.CurrentTheme = value.ToString();
        _uriHelpWer.NavigateTo(_uriHelpWer.ToAbsoluteUri(_uriHelpWer.Uri).ToString());
    }

}